{"version":3,"sources":["index.tsx"],"names":["UserLocalizationSettingsContext","React","createContext","isFetchingLocalizationSettings","localizationSettingsError","localizationSettings","coordinates","timezone","region","measurementSystem","distanceUnit","temperatureUnit","timeFormat","dateFormat","weekStartDay","currency","setLocalizationSettings","console","warn","useUserLocalizationSettings","useContext","USER_LOCALIZATION_SETTINGS_STORAGE_KEY","UserLocalizationSettingsProvider","i18n","shouldUseLocation","children","userLocale","locale","defaultSettings","useMemo","isMetric","setIsFetchingLocalizationSettings","useState","setLocalizationSettingsError","getLocation","useCallback","value","AsyncStorage","getItem","storedSettings","JSON","parse","isoCountryCode","then","granted","coords","latitude","longitude","settings","geocode","countryData","axios","get","data","countries","find","country","cca2","hourClock","dateFormats","err","__DEV__","error","useEffect","setItem","stringify"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  isMetric,\n  locale,\n  region,\n  timezone,\n  currency,\n} from \"expo-localization\";\nimport {\n  requestForegroundPermissionsAsync,\n  getCurrentPositionAsync,\n  reverseGeocodeAsync,\n} from \"expo-location\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { getDateFormatPatternForLocale } from \"./getDateFormatPatternForLocale\";\nimport type { Country, UserLocalizationSettings } from \"./types\";\n\nexport type UserLocalizationSettingsContextType = {\n  isFetchingLocalizationSettings: boolean;\n  localizationSettingsError: unknown | Error | null;\n  localizationSettings: UserLocalizationSettings;\n  setLocalizationSettings: (e: UserLocalizationSettings) => void;\n};\n\nexport const UserLocalizationSettingsContext =\n  React.createContext<UserLocalizationSettingsContextType>({\n    isFetchingLocalizationSettings: false,\n    localizationSettingsError: null,\n    localizationSettings: {\n      coordinates: null,\n      timezone: null,\n      region: null,\n      measurementSystem: null,\n      distanceUnit: null,\n      temperatureUnit: null,\n      timeFormat: null,\n      dateFormat: null,\n      weekStartDay: null,\n      currency: null,\n    },\n    setLocalizationSettings: () =>\n      console.warn(\"UserLocalizationContext: Provider not set\"),\n  });\n\nexport const useUserLocalizationSettings =\n  (): UserLocalizationSettingsContextType =>\n    React.useContext(UserLocalizationSettingsContext);\n\nexport type UserLocalizationSettingsProviderProps = {\n  i18n?: string | null;\n  shouldUseLocation?: boolean;\n  children: React.ReactNode;\n};\n\nexport const USER_LOCALIZATION_SETTINGS_STORAGE_KEY =\n  \"@user-localization-settings\";\n\nexport function UserLocalizationSettingsProvider({\n  i18n,\n  shouldUseLocation = false,\n  children,\n}: UserLocalizationSettingsProviderProps): React.ReactElement {\n  const userLocale: string = i18n ?? locale;\n\n  const defaultSettings = React.useMemo(\n    (): UserLocalizationSettings => ({\n      coordinates: null,\n      region: region,\n      timezone: timezone,\n      measurementSystem: isMetric ? \"metric\" : \"imperial\",\n      distanceUnit: isMetric ? \"kilometer\" : \"mile\",\n      temperatureUnit: isMetric ? \"celsius\" : \"fahrenheit\",\n      timeFormat: isMetric ? \"24hr\" : \"12hr\",\n      dateFormat: getDateFormatPatternForLocale(userLocale),\n      weekStartDay: isMetric ? \"monday\" : \"sunday\",\n      currency: currency,\n    }),\n    [userLocale]\n  );\n\n  const [isFetchingLocalizationSettings, setIsFetchingLocalizationSettings] =\n    React.useState<boolean>(true);\n  const [localizationSettingsError, setLocalizationSettingsError] =\n    React.useState<unknown | null>(null);\n  const [localizationSettings, setLocalizationSettings] =\n    React.useState<UserLocalizationSettings>(defaultSettings);\n\n  const getLocation = React.useCallback(async () => {\n    try {\n      const value = await AsyncStorage.getItem(\n        USER_LOCALIZATION_SETTINGS_STORAGE_KEY\n      );\n\n      const storedSettings = typeof value === \"string\" && JSON.parse(value);\n\n      if (\n        typeof storedSettings === \"object\" &&\n        \"measurementSystem\" in storedSettings\n      ) {\n        setLocalizationSettings(defaultSettings);\n      } else {\n        let isoCountryCode: string | null | undefined;\n\n        if (shouldUseLocation) {\n          isoCountryCode = await requestForegroundPermissionsAsync().then(\n            /// @ts-ignore\n            // TODO: typing broken in expo-location lib\n            ({ granted }) => {\n              if (!granted) return;\n\n              return getCurrentPositionAsync({}).then(({ coords }) => {\n                if (!coords) return;\n\n                const { latitude, longitude } = coords;\n\n                setLocalizationSettings((settings) => ({\n                  ...settings,\n                  coordinates: {\n                    latitude,\n                    longitude,\n                  },\n                }));\n\n                return reverseGeocodeAsync(coords).then((geocode) =>\n                  geocode ? geocode[0]?.isoCountryCode ?? region : region\n                );\n              });\n            }\n          );\n        }\n\n        const countryData = await axios\n          .get(`https://iso-locale.vercel.app/api/v1/countries`)\n          .then(\n            ({\n              data: { countries },\n            }: AxiosResponse<{ countries: Country[] }>): Country | undefined =>\n              countries.find(\n                (country: Country) => country.cca2 === isoCountryCode ?? region\n              )\n          );\n\n        if (countryData) {\n          setLocalizationSettings((settings) => ({\n            ...settings,\n            coordinates: settings.coordinates ?? countryData.coordinates,\n            region: isoCountryCode ?? region,\n            distanceUnit: countryData.distanceUnit,\n            temperatureUnit: countryData.temperatureUnit,\n            timeFormat: countryData.hourClock,\n            dateFormat:\n              countryData.dateFormats[userLocale] ??\n              getDateFormatPatternForLocale(userLocale),\n            weekStartDay: countryData.weekStartDay,\n          }));\n        }\n      }\n    } catch (err) {\n      setLocalizationSettingsError(err);\n      if (__DEV__) {\n        console.error(err);\n      }\n    } finally {\n      setIsFetchingLocalizationSettings(false);\n    }\n  }, [shouldUseLocation, userLocale, defaultSettings]);\n\n  React.useEffect(() => {\n    getLocation();\n  }, [getLocation]);\n\n  React.useEffect(() => {\n    (async () => {\n      await AsyncStorage.setItem(\n        USER_LOCALIZATION_SETTINGS_STORAGE_KEY,\n        JSON.stringify(localizationSettings)\n      );\n    })();\n  }, [localizationSettings]);\n\n  return (\n    <UserLocalizationSettingsContext.Provider\n      value={{\n        localizationSettings,\n        isFetchingLocalizationSettings,\n        localizationSettingsError,\n        setLocalizationSettings,\n      }}\n    >\n      {children}\n    </UserLocalizationSettingsContext.Provider>\n  );\n}\n"]}