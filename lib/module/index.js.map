{"version":3,"sources":["index.tsx"],"names":["React","isMetric","locale","region","timezone","currency","requestForegroundPermissionsAsync","getCurrentPositionAsync","reverseGeocodeAsync","AsyncStorage","axios","getDateFormatPatternForLocale","LocalizationSettingsContext","createContext","isFetchingLocalizationSettings","localizationSettingsError","localizationSettings","coordinates","measurementSystem","distanceUnit","temperatureUnit","timeFormat","dateFormat","weekStartDay","setLocalizationSettings","console","warn","useLocalizationSettings","useContext","USER_LOCALIZATION_SETTINGS_STORAGE_KEY","LocalizationSettingsProvider","i18n","shouldUseLocation","children","userLocale","defaultSettings","useMemo","setIsFetchingLocalizationSettings","useState","setLocalizationSettingsError","getLocation","useCallback","value","getItem","storedSettings","JSON","parse","isoCountryCode","then","granted","coords","latitude","longitude","settings","geocode","countryData","get","data","countries","find","country","cca2","hourClock","dateFormats","err","__DEV__","error","useEffect","setItem","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  isMetric,\n  locale,\n  region,\n  timezone,\n  currency,\n} from 'expo-localization';\nimport {\n  requestForegroundPermissionsAsync,\n  getCurrentPositionAsync,\n  reverseGeocodeAsync,\n} from 'expo-location';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport axios, { AxiosResponse } from 'axios';\nimport { getDateFormatPatternForLocale } from './getDateFormatPatternForLocale';\nimport type { Country, LocalizationSettings } from './types';\n\nexport type LocalizationSettingsContextType = {\n  isFetchingLocalizationSettings: boolean;\n  localizationSettingsError: unknown | Error | null;\n  localizationSettings: LocalizationSettings;\n  setLocalizationSettings: (e: LocalizationSettings) => void;\n};\n\nexport const LocalizationSettingsContext =\n  React.createContext<LocalizationSettingsContextType>({\n    isFetchingLocalizationSettings: false,\n    localizationSettingsError: null,\n    localizationSettings: {\n      coordinates: null,\n      timezone: null,\n      region: null,\n      measurementSystem: null,\n      distanceUnit: null,\n      temperatureUnit: null,\n      timeFormat: null,\n      dateFormat: null,\n      weekStartDay: null,\n      currency: null,\n    },\n    setLocalizationSettings: () =>\n      console.warn('UserLocalizationSettings: Provider not set'),\n  });\n\nexport const useLocalizationSettings = (): LocalizationSettingsContextType =>\n  React.useContext(LocalizationSettingsContext);\n\nexport type LocalizationSettingsProviderProps = {\n  i18n?: string | null;\n  shouldUseLocation?: boolean;\n  children: React.ReactNode;\n};\n\nexport const USER_LOCALIZATION_SETTINGS_STORAGE_KEY = '@localization-settings';\n\nexport function LocalizationSettingsProvider({\n  i18n,\n  shouldUseLocation = false,\n  children,\n}: LocalizationSettingsProviderProps): React.ReactElement {\n  const userLocale: string = i18n ?? locale;\n\n  const defaultSettings = React.useMemo(\n    (): LocalizationSettings => ({\n      coordinates: null,\n      region: region,\n      timezone: timezone,\n      measurementSystem: isMetric ? 'metric' : 'imperial',\n      distanceUnit: isMetric ? 'kilometer' : 'mile',\n      temperatureUnit: isMetric ? 'celsius' : 'fahrenheit',\n      timeFormat: isMetric ? '24hr' : '12hr',\n      dateFormat: getDateFormatPatternForLocale(userLocale),\n      weekStartDay: isMetric ? 'monday' : 'sunday',\n      currency: currency,\n    }),\n    [userLocale]\n  );\n\n  const [isFetchingLocalizationSettings, setIsFetchingLocalizationSettings] =\n    React.useState<boolean>(true);\n  const [localizationSettingsError, setLocalizationSettingsError] =\n    React.useState<unknown | null>(null);\n  const [localizationSettings, setLocalizationSettings] =\n    React.useState<LocalizationSettings>(defaultSettings);\n\n  const getLocation = React.useCallback(async () => {\n    try {\n      const value = await AsyncStorage.getItem(\n        USER_LOCALIZATION_SETTINGS_STORAGE_KEY\n      );\n\n      const storedSettings = typeof value === 'string' && JSON.parse(value);\n\n      if (\n        typeof storedSettings === 'object' &&\n        'measurementSystem' in storedSettings\n      ) {\n        setLocalizationSettings(defaultSettings);\n      } else {\n        let isoCountryCode: string | null | undefined;\n\n        if (shouldUseLocation) {\n          isoCountryCode = await requestForegroundPermissionsAsync().then(\n            /// @ts-ignore\n            // TODO: typing broken in expo-location lib\n            ({ granted }) => {\n              if (!granted) return;\n\n              return getCurrentPositionAsync({}).then(({ coords }) => {\n                if (!coords) return;\n\n                const { latitude, longitude } = coords;\n\n                setLocalizationSettings((settings) => ({\n                  ...settings,\n                  coordinates: {\n                    latitude,\n                    longitude,\n                  },\n                }));\n\n                return reverseGeocodeAsync(coords).then((geocode) =>\n                  geocode ? geocode[0]?.isoCountryCode ?? region : region\n                );\n              });\n            }\n          );\n        }\n\n        const countryData = await axios\n          .get(`https://iso-locale.vercel.app/api/v1/countries`)\n          .then(\n            ({\n              data: { countries },\n            }: AxiosResponse<{ countries: Country[] }>): Country | undefined =>\n              countries.find(\n                (country: Country) => country.cca2 === isoCountryCode ?? region\n              )\n          );\n\n        if (countryData) {\n          setLocalizationSettings((settings) => ({\n            ...settings,\n            coordinates: settings.coordinates ?? countryData.coordinates,\n            region: isoCountryCode ?? region,\n            distanceUnit: countryData.distanceUnit,\n            temperatureUnit: countryData.temperatureUnit,\n            timeFormat: countryData.hourClock,\n            dateFormat:\n              countryData.dateFormats[userLocale] ??\n              getDateFormatPatternForLocale(userLocale),\n            weekStartDay: countryData.weekStartDay,\n          }));\n        }\n      }\n    } catch (err) {\n      setLocalizationSettingsError(err);\n      if (__DEV__) {\n        console.error(err);\n      }\n    } finally {\n      setIsFetchingLocalizationSettings(false);\n    }\n  }, [shouldUseLocation, userLocale, defaultSettings]);\n\n  React.useEffect(() => {\n    getLocation();\n  }, [getLocation]);\n\n  React.useEffect(() => {\n    (async () => {\n      await AsyncStorage.setItem(\n        USER_LOCALIZATION_SETTINGS_STORAGE_KEY,\n        JSON.stringify(localizationSettings)\n      );\n    })();\n  }, [localizationSettings]);\n\n  return (\n    <LocalizationSettingsContext.Provider\n      value={{\n        localizationSettings,\n        isFetchingLocalizationSettings,\n        localizationSettingsError,\n        setLocalizationSettings,\n      }}\n    >\n      {children}\n    </LocalizationSettingsContext.Provider>\n  );\n}\n"]}